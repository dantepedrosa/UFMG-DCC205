#======================================================================================
#=================================== RELATÃ“RIO ========================================
#======================================================================================

Problema:

O programa alocava diversos vetores dinÃ¢micos dentro da mesma variÃ¡vel, gerando perda de informaÃ§Ã£o e espaÃ§o alocado.
AlÃ©m disso, o programa liberou espaÃ§o apenas uma vez.

SoluÃ§Ã£o:

Ao invÃ©s que guardar os endereÃ§os iniciais das alocaÃ§Ãµes dinÃ¢micas em uma variÃ¡vel, os endereÃ§os foram guardados em um vetor, permitindo acesso posteriormente para liberar todos os espaÃ§os alocados por meio de um loop.

#======================================================================================
#===================================== SCRIPT =========================================
#======================================================================================

Script started on 2024-11-18 21:34:02-03:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="77" LINES="10"]
[?2004h]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ exitmake memtest SRC=src/c2.c[A
]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ [C[C[C[C[Crun SRC=src/c2[4P.c[A
]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ [C[C[C[C[C[1PSRC=src/c2.c

[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P.c3.c
[?2004l
gcc -g -Wall -Wextra -Iinclude -c src/c3.c -o obj/c3.o
[01m[Ksrc/c3.c:[m[K In function â€˜[01m[Kmain[m[Kâ€™:
[01m[Ksrc/c3.c:4:14:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kargc[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
    4 | int main([01;35m[Kint argc[m[K, char** argv){
      |          [01;35m[K~~~~^~~~[m[K
[01m[Ksrc/c3.c:4:27:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kargv[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
    4 | int main(int argc, [01;35m[Kchar** argv[m[K){
      |                    [01;35m[K~~~~~~~^~~~[m[K
gcc -g -Wall -Wextra -Iinclude -o bin/c3 obj/c3.o
[?2004h]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ make SRC=src/c3.cexit[Kmake memtest SRC=src/c2.c[1P.c3.c
[?2004l
valgrind --leak-check=full ./bin/c3
==11479== Memcheck, a memory error detector
==11479== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==11479== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==11479== Command: ./bin/c3
==11479== 
==11479== 
==11479== HEAP SUMMARY:
==11479==     in use at exit: 3,600 bytes in 9 blocks
==11479==   total heap usage: 10 allocs, 1 frees, 4,000 bytes allocated
==11479== 
==11479== 3,600 bytes in 9 blocks are definitely lost in loss record 1 of 1
==11479==    at 0x48850C8: malloc (vg_replace_malloc.c:381)
==11479==    by 0x1087F3: main (c3.c:9)
==11479== 
==11479== LEAK SUMMARY:
==11479==    definitely lost: 3,600 bytes in 9 blocks
==11479==    indirectly lost: 0 bytes in 0 blocks
==11479==      possibly lost: 0 bytes in 0 blocks
==11479==    still reachable: 0 bytes in 0 blocks
==11479==         suppressed: 0 bytes in 0 blocks
==11479== 
==11479== For lists of detected and suppressed errors, rerun with: -s
==11479== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
[?2004h]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ make memtest SRC=src/c3.c[A
]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ [C[C[C[C[C[1PSRC=src/c3.c

[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?2004l
gcc -g -Wall -Wextra -Iinclude -c src/c3.c -o obj/c3.o
[01m[Ksrc/c3.c:[m[K In function â€˜[01m[Kmain[m[Kâ€™:
[01m[Ksrc/c3.c:9:10:[m[K [01;35m[Kwarning: [m[Kassignment to â€˜[01m[Kint[m[Kâ€™ from â€˜[01m[Kvoid *[m[Kâ€™ makes integer from pointer without a cast [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wint-conversion-Wint-conversion]8;;[m[K]
    9 |     a[i] [01;35m[K=[m[K malloc(sizeof(int) * 100);
      |          [01;35m[K^[m[K
[01m[Ksrc/c3.c:12:11:[m[K [01;35m[Kwarning: [m[Kpassing argument 1 of â€˜[01m[Kfree[m[Kâ€™ makes pointer from integer without a cast [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wint-conversion-Wint-conversion]8;;[m[K]
   12 |     free([01;35m[Ka[i][m[K);
      |          [01;35m[K~^~~[m[K
      |           [01;35m[K|[m[K
      |           [01;35m[Kint[m[K
In file included from [01m[Ksrc/c3.c:2[m[K:
[01m[K/usr/include/stdlib.h:568:25:[m[K [01;36m[Knote: [m[Kexpected â€˜[01m[Kvoid *[m[Kâ€™ but argument is of type â€˜[01m[Kint[m[Kâ€™
  568 | extern void free ([01;36m[Kvoid *__ptr[m[K) __THROW;
      |                   [01;36m[K~~~~~~^~~~~[m[K
[01m[Ksrc/c3.c:4:14:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kargc[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
    4 | int main([01;35m[Kint argc[m[K, char** argv){
      |          [01;35m[K~~~~^~~~[m[K
[01m[Ksrc/c3.c:4:27:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kargv[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter-Wunused-parameter]8;;[m[K]
    4 | int main(int argc, [01;35m[Kchar** argv[m[K){
      |                    [01;35m[K~~~~~~~^~~~[m[K
gcc -g -Wall -Wextra -Iinclude -o bin/c3 obj/c3.o
[?2004h]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ make SRC=src/c3.cmemtest SRC=src/c3.c
[?2004l
valgrind --leak-check=full ./bin/c3
==11626== Memcheck, a memory error detector
==11626== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==11626== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==11626== Command: ./bin/c3
==11626== 
==11626== 
==11626== HEAP SUMMARY:
==11626==     in use at exit: 0 bytes in 0 blocks
==11626==   total heap usage: 10 allocs, 10 frees, 4,000 bytes allocated
==11626== 
==11626== All heap blocks were freed -- no leaks are possible
==11626== 
==11626== For lists of detected and suppressed errors, rerun with: -s
==11626== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[?2004h]0;dante@penguin: ~/UFMG/UFMG-DCC205/ap4 - debug and refactor[01;32mdante@penguin[00m:[01;34m~/UFMG/UFMG-DCC205/ap4 - debug and refactor[00m$ exit
[?2004l
exit

Script done on 2024-11-18 21:37:43-03:00 [COMMAND_EXIT_CODE="0"]
